<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [tempate\tempate.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image tempate\tempate.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Mon Apr 29 20:43:28 2019
<BR><P>
<H3>Maximum Stack Usage =       1948 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char) &rArr; DitherPwm::setupDMA() &rArr; LL_DMA_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[119]">__user_initial_stackheap</a>
 <LI><a href="#[127]">unw_getcontext</a>
 <LI><a href="#[17f]">libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)</a>
 <LI><a href="#[17d]">libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)</a>
 <LI><a href="#[17e]">libunwind::Registers_arm::saveVFPv3(unsigned long long*)</a>
 <LI><a href="#[186]">libunwind::Registers_arm::restoreCoreAndJumpTo()</a>
 <LI><a href="#[188]">libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)</a>
 <LI><a href="#[187]">libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)</a>
 <LI><a href="#[189]">libunwind::Registers_arm::restoreVFPv3(unsigned long long*)</a>
 <LI><a href="#[216]">_Unwind_Complete</a>
 <LI><a href="#[1b0]">_Unwind_DeleteException</a>
 <LI><a href="#[123]">_Unwind_GetLanguageSpecificData</a>
 <LI><a href="#[125]">_Unwind_GetRegionStart</a>
 <LI><a href="#[126]">_Unwind_RaiseException</a>
 <LI><a href="#[12a]">_Unwind_Resume</a>
 <LI><a href="#[12b]">_Unwind_VRS_Get</a>
 <LI><a href="#[12f]">_Unwind_VRS_Interpret</a>
 <LI><a href="#[130]">_Unwind_VRS_Pop</a>
 <LI><a href="#[132]">_Unwind_VRS_Set</a>
 <LI><a href="#[13b]">__cxxabiv1::__enum_type_info::~__enum_type_info()</a>
 <LI><a href="#[217]">__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</a>
 <LI><a href="#[218]">__cxxabiv1::__shim_type_info::~__shim_type_info()</a>
 <LI><a href="#[85]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a>
 <LI><a href="#[219]">__cxxabiv1::__array_type_info::~__array_type_info()</a>
 <LI><a href="#[21a]">__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</a>
 <LI><a href="#[21b]">__cxxabiv1::__class_type_info::~__class_type_info()</a>
 <LI><a href="#[21c]">__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</a>
 <LI><a href="#[21d]">__cxxabiv1::__pbase_type_info::~__pbase_type_info()</a>
 <LI><a href="#[21e]">__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</a>
 <LI><a href="#[21f]">__cxxabiv1::__pointer_type_info::~__pointer_type_info()</a>
 <LI><a href="#[220]">__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</a>
 <LI><a href="#[221]">__cxxabiv1::__function_type_info::~__function_type_info()</a>
 <LI><a href="#[222]">__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</a>
 <LI><a href="#[223]">__cxxabiv1::__si_class_type_info::~__si_class_type_info()</a>
 <LI><a href="#[224]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</a>
 <LI><a href="#[225]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</a>
 <LI><a href="#[226]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</a>
 <LI><a href="#[227]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</a>
 <LI><a href="#[228]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</a>
 <LI><a href="#[229]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</a>
 <LI><a href="#[22a]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</a>
 <LI><a href="#[86]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a>
 <LI><a href="#[13d]">__cxxabiv1::__free_with_fallback(void*)</a>
 <LI><a href="#[8d]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a>
 <LI><a href="#[13f]">__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</a>
 <LI><a href="#[91]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a>
 <LI><a href="#[141]">__cxxabiv1::__aligned_free_with_fallback(void*)</a>
 <LI><a href="#[142]">__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</a>
 <LI><a href="#[a2]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a>
 <LI><a href="#[99]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a>
 <LI><a href="#[9a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a>
 <LI><a href="#[9e]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a>
 <LI><a href="#[180]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</a>
 <LI><a href="#[98]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a>
 <LI><a href="#[9f]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a>
 <LI><a href="#[a1]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a>
 <LI><a href="#[183]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</a>
 <LI><a href="#[a0]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a>
 <LI><a href="#[9b]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a>
 <LI><a href="#[96]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a>
 <LI><a href="#[9d]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a>
 <LI><a href="#[97]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a>
 <LI><a href="#[9c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a>
 <LI><a href="#[95]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a>
 <LI><a href="#[94]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a>
 <LI><a href="#[182]">libunwind::Registers_arm::getRegisterName(int)</a>
 <LI><a href="#[185]">libunwind::Registers_arm::restoreSavedFloatRegisters()</a>
 <LI><a href="#[93]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a>
 <LI><a href="#[87]">__cxxabiv1::__shim_type_info::noop1() const</a>
 <LI><a href="#[88]">__cxxabiv1::__shim_type_info::noop2() const</a>
 <LI><a href="#[8a]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[8b]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[8c]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[18b]">__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</a>
 <LI><a href="#[89]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[18c]">__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[18d]">__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[18f]">__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[8e]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[8f]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[90]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[190]">__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[92]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[18e]">__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[191]">__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[a4]">std::bad_exception::what() const</a>
 <LI><a href="#[a6]">std::bad_array_length::what() const</a>
 <LI><a href="#[a8]">std::bad_array_new_length::what() const</a>
 <LI><a href="#[aa]">std::bad_alloc::what() const</a>
 <LI><a href="#[a3]">std::bad_exception::~bad_exception__deallocating()</a>
 <LI><a href="#[232]">std::bad_array_length::bad_array_length()</a>
 <LI><a href="#[233]">std::bad_array_length::bad_array_length__sub_object()</a>
 <LI><a href="#[a5]">std::bad_array_length::~bad_array_length__deallocating()</a>
 <LI><a href="#[234]">std::bad_array_new_length::bad_array_new_length()</a>
 <LI><a href="#[235]">std::bad_array_new_length::bad_array_new_length__sub_object()</a>
 <LI><a href="#[a7]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a>
 <LI><a href="#[184]">T2 std::__1::__upper_bound&lang;std::__1::__less&lang;unsigned, unsigned&rang;&, libunwind::EHABISectionIterator&lang;libunwind::LocalAddressSpace&rang;, unsigned&rang;(T2, T2, const T3&, T1)</a>
 <LI><a href="#[1a5]">std::bad_alloc::bad_alloc()</a>
 <LI><a href="#[236]">std::bad_alloc::bad_alloc__sub_object()</a>
 <LI><a href="#[a9]">std::bad_alloc::~bad_alloc__deallocating()</a>
 <LI><a href="#[1]">std::bad_exception::~bad_exception()</a>
 <LI><a href="#[237]">std::bad_exception::~bad_exception__sub_object()</a>
 <LI><a href="#[238]">std::bad_array_length::~bad_array_length()</a>
 <LI><a href="#[239]">std::bad_array_length::~bad_array_length__sub_object()</a>
 <LI><a href="#[23a]">std::bad_array_new_length::~bad_array_new_length()</a>
 <LI><a href="#[23b]">std::bad_array_new_length::~bad_array_new_length__sub_object()</a>
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a>
 <LI><a href="#[23c]">std::bad_alloc::~bad_alloc__sub_object()</a>
 <LI><a href="#[23d]">std::exception::~exception()</a>
 <LI><a href="#[7]">std::exception::~exception__sub_object()</a>
 <LI><a href="#[23e]">std::type_info::~type_info()</a>
 <LI><a href="#[2]">std::type_info::~type_info__sub_object()</a>
 <LI><a href="#[192]">std::unexpected()</a>
 <LI><a href="#[14a]">std::__terminate(void(*)())</a>
 <LI><a href="#[193]">std::__unexpected(void(*)())</a>
 <LI><a href="#[1ad]">std::get_terminate()</a>
 <LI><a href="#[23f]">std::set_terminate(void(*)())</a>
 <LI><a href="#[1ae]">std::get_unexpected()</a>
 <LI><a href="#[240]">std::set_unexpected(void(*)())</a>
 <LI><a href="#[1a3]">std::get_new_handler()</a>
 <LI><a href="#[241]">std::set_new_handler(void(*)())</a>
 <LI><a href="#[f]">std::terminate()</a>
 <LI><a href="#[198]">operator delete[] (void*)</a>
 <LI><a href="#[199]">operator delete[] (void*, const std::nothrow_t&)</a>
 <LI><a href="#[19a]">operator delete[] (void*, unsigned)</a>
 <LI><a href="#[13c]">operator delete (void*)</a>
 <LI><a href="#[19b]">operator delete (void*, const std::nothrow_t&)</a>
 <LI><a href="#[19c]">operator delete (void*, unsigned)</a>
 <LI><a href="#[19d]">operator new[] (unsigned)</a>
 <LI><a href="#[19f]">operator new[] (unsigned, const std::nothrow_t&)</a>
 <LI><a href="#[1a0]">operator new[] (unsigned, std::align_val_t)</a>
 <LI><a href="#[1a2]">operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)</a>
 <LI><a href="#[19e]">operator new(unsigned)</a>
 <LI><a href="#[1a7]">operator new(unsigned, const std::nothrow_t&)</a>
 <LI><a href="#[1a1]">operator new(unsigned, std::align_val_t)</a>
 <LI><a href="#[1a8]">operator new(unsigned, std::align_val_t, const std::nothrow_t&)</a>
 <LI><a href="#[70]">__aeabi_unwind_cpp_pr0</a>
 <LI><a href="#[71]">__aeabi_unwind_cpp_pr1</a>
 <LI><a href="#[72]">__aeabi_unwind_cpp_pr2</a>
 <LI><a href="#[196]">__clang_call_terminate</a>
 <LI><a href="#[1a9]">__cxa_allocate_dependent_exception</a>
 <LI><a href="#[1a4]">__cxa_allocate_exception</a>
 <LI><a href="#[149]">__cxa_begin_catch</a>
 <LI><a href="#[1ac]">__cxa_begin_cleanup</a>
 <LI><a href="#[1aa]">__cxa_call_unexpected</a>
 <LI><a href="#[14c]">__cxa_decrement_exception_refcount</a>
 <LI><a href="#[195]">__cxa_end_catch</a>
 <LI><a href="#[1ab]">__cxa_get_globals</a>
 <LI><a href="#[197]">__cxa_get_globals_fast</a>
 <LI><a href="#[1af]">__cxa_rethrow</a>
 <LI><a href="#[1b1]">__cxa_rethrow_primary_exception</a>
 <LI><a href="#[1a6]">__cxa_throw</a>
 <LI><a href="#[166]">__dynamic_cast</a>
 <LI><a href="#[1b2]">__gnu_unwind_frame</a>
 <LI><a href="#[76]">__gxx_personality_v0</a>
 <LI><a href="#[194]">abort_message</a>
 <LI><a href="#[181]">decode_eht_entry</a>
 <LI><a href="#[12e]">unw_get_fpreg</a>
 <LI><a href="#[124]">unw_get_proc_info</a>
 <LI><a href="#[12c]">unw_get_reg</a>
 <LI><a href="#[128]">unw_init_local</a>
 <LI><a href="#[13a]">unw_resume</a>
 <LI><a href="#[12d]">unw_save_vfp_as_X</a>
 <LI><a href="#[133]">unw_set_fpreg</a>
 <LI><a href="#[131]">unw_set_reg</a>
 <LI><a href="#[14e]">unw_step</a>
 <LI><a href="#[143]">_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</a>
 <LI><a href="#[14b]">_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</a>
 <LI><a href="#[146]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>
 <LI><a href="#[145]">_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</a>
 <LI><a href="#[147]">_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</a>
 <LI><a href="#[129]">_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</a>
 <LI><a href="#[14d]">&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</a>
 <LI><a href="#[148]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>
 <LI><a href="#[75]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[74]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[ad]">__cxa_end_cleanup_impl</a>
 <LI><a href="#[13e]">&lang;unnamed namespace 1&rang;::fallback_free(void*)</a>
 <LI><a href="#[140]">&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[1af]">__cxa_rethrow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14a]">std::__terminate(void(*)())</a><BR>
 <LI><a href="#[1aa]">__cxa_call_unexpected</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14a]">std::__terminate(void(*)())</a><BR>
 <LI><a href="#[146]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14a]">std::__terminate(void(*)())</a><BR>
 <LI><a href="#[148]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14a]">std::__terminate(void(*)())</a><BR>
 <LI><a href="#[14c]">__cxa_decrement_exception_refcount</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1aa]">__cxa_call_unexpected</a><BR>
 <LI><a href="#[1a4]">__cxa_allocate_exception</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1aa]">__cxa_call_unexpected</a><BR>
 <LI><a href="#[149]">__cxa_begin_catch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">std::terminate()</a><BR>
 <LI><a href="#[196]">__clang_call_terminate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">std::terminate()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">LL_APB1_GRP1_EnableClock</a> from functions.o(.text.LL_APB1_GRP1_EnableClock) referenced 18 times from functions.o(.data.AllTimersRccAxBxTable)
 <LI><a href="#[c]">LL_APB2_GRP1_EnableClock</a> from functions.o(.text.LL_APB2_GRP1_EnableClock) referenced 10 times from functions.o(.data.AllTimersRccAxBxTable)
 <LI><a href="#[13]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[1c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from main.o(.text.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ab]">_GLOBAL__sub_I_main.c</a> from main.o(.text._GLOBAL__sub_I_main.c) referenced from main.o(.init_array)
 <LI><a href="#[85]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[85]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[85]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[86]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[8d]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[91]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[75]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_throw)
 <LI><a href="#[74]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
 <LI><a href="#[82]">MenuElement::isNeedToHandleEvent(const MenuEvents&)</a> from main.o(.text._ZN11MenuElement19isNeedToHandleEventERK10MenuEvents) referenced from main.o(.rodata._ZTV4Menu)
 <LI><a href="#[77]">NextMenuHandler::handleExternalEvent(MenuElement*, ExternalEvent)</a> from main.o(.text._ZN15NextMenuHandler19handleExternalEventEP11MenuElement13ExternalEvent) referenced from main.o(.rodata._ZTV15NextMenuHandler)
 <LI><a href="#[78]">PrevMenuHandler::handleExternalEvent(MenuElement*, ExternalEvent)</a> from main.o(.text._ZN15PrevMenuHandler19handleExternalEventEP11MenuElement13ExternalEvent) referenced from main.o(.rodata._ZTV15PrevMenuHandler)
 <LI><a href="#[7a]">MenuElementVariable::handleEvent(const MenuEvents&)</a> from main.o(.text._ZN19MenuElementVariable11handleEventERK10MenuEvents) referenced from main.o(.rodata._ZTV19MenuElementVariable)
 <LI><a href="#[7b]">MenuElementVariable::isNeedToHandleEvent(const MenuEvents&)</a> from main.o(.text._ZN19MenuElementVariable19isNeedToHandleEventERK10MenuEvents) referenced from main.o(.rodata._ZTV19MenuElementVariable)
 <LI><a href="#[79]">MenuElementVariable::display()</a> from main.o(.text._ZN19MenuElementVariable7displayEv) referenced from main.o(.rodata._ZTV19MenuElementVariable)
 <LI><a href="#[7d]">MenuElementOptionList::handleEvent(const MenuEvents&)</a> from main.o(.text._ZN21MenuElementOptionList11handleEventERK10MenuEvents) referenced from main.o(.rodata._ZTV21MenuElementOptionList)
 <LI><a href="#[7e]">MenuElementOptionList::isNeedToHandleEvent(const MenuEvents&)</a> from main.o(.text._ZN21MenuElementOptionList19isNeedToHandleEventERK10MenuEvents) referenced from main.o(.rodata._ZTV21MenuElementOptionList)
 <LI><a href="#[7c]">MenuElementOptionList::display()</a> from main.o(.text._ZN21MenuElementOptionList7displayEv) referenced from main.o(.rodata._ZTV21MenuElementOptionList)
 <LI><a href="#[7f]">MainVoltageChangeHandler::handleExternalEvent(MenuElement*, ExternalEvent)</a> from main.o(.text._ZN24MainVoltageChangeHandler19handleExternalEventEP11MenuElement13ExternalEvent) referenced from main.o(.rodata._ZTV24MainVoltageChangeHandler)
 <LI><a href="#[81]">Menu::handleEvent(const MenuEvents&)</a> from main.o(.text._ZN4Menu11handleEventERK10MenuEvents) referenced from main.o(.rodata._ZTV4Menu)
 <LI><a href="#[80]">Menu::display()</a> from main.o(.text._ZN4Menu7displayEv) referenced from main.o(.rodata._ZTV4Menu)
 <LI><a href="#[83]">Button::handle()</a> from inputhandler_1.o(.text._ZN6Button6handleEv) referenced from inputhandler_1.o(.rodata._ZTV6Button)
 <LI><a href="#[84]">Encoder::handle()</a> from inputhandler_1.o(.text._ZN7Encoder6handleEv) referenced from inputhandler_1.o(.rodata._ZTV7Encoder)
 <LI><a href="#[a2]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[99]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9e]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[98]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9f]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[a1]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[a0]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9b]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[96]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9d]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[97]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[95]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[94]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[93]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a> from libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[87]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[87]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[87]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[88]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[88]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[88]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[8a]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[8b]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[8c]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[89]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[89]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8e]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8f]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[90]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[92]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[a4]">std::bad_exception::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[a6]">std::bad_array_length::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt16bad_array_length4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
 <LI><a href="#[a8]">std::bad_array_new_length::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[aa]">std::bad_alloc::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[a3]">std::bad_exception::~bad_exception__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[1]">std::bad_exception::~bad_exception()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from cxa_personality.cpp.o(.text.__cxa_call_unexpected)
 <LI><a href="#[a5]">std::bad_array_length::~bad_array_length__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
 <LI><a href="#[a7]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[a9]">std::bad_alloc::~bad_alloc__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from new.cpp.o(.text._Znwj)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from new.cpp.o(.text._ZnwjSt11align_val_t)
 <LI><a href="#[7]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[7]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
 <LI><a href="#[7]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[7]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[f]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced 2 times from cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
 <LI><a href="#[f]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
 <LI><a href="#[70]">__aeabi_unwind_cpp_pr0</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[71]">__aeabi_unwind_cpp_pr1</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[72]">__aeabi_unwind_cpp_pr2</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnajRKSt9nothrow_t)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnajSt11align_val_tRKSt9nothrow_t)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnwjRKSt9nothrow_t)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnwjSt11align_val_tRKSt9nothrow_t)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
 <LI><a href="#[76]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from main.o(.ARM.extab.text.main)
 <LI><a href="#[ac]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[6f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6d]">_sputc</a> from _sputc.o(.text) referenced 2 times from vsprintf.o(.text)
 <LI><a href="#[e]">abort</a> from abort.o(.text) referenced 2 times from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
 <LI><a href="#[e]">abort</a> from abort.o(.text) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ac]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1de]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e0]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e1]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b2]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[f5]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b4]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[b6]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b8]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b9]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ba]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1e3]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[bc]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bf]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c0]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c4]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c8]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[ca]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[cc]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ce]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[d0]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d2]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[e1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[da]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[db]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1fb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1fc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1fd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1ff]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[200]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b0]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[201]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[de]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[202]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1948 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char) &rArr; DitherPwm::setupDMA() &rArr; LL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[203]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[204]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e9]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[ec]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setVoltage(FixedPoint)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>

<P><STRONG><a name="[205]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPrintf
</UL>

<P><STRONG><a name="[ef]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
</UL>

<P><STRONG><a name="[bd]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[f3]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[163]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::MenuElementVariable(const FixedPoint&, const FixedPoint&, const FixedPoint&, const char*, const char*, const char*, bool, ExternalEventHandler*)
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::MenuElementVariable(const FixedPoint&, const FixedPoint&, const FixedPoint&, const char*, const char*, const char*, bool, ExternalEventHandler*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler::InputHandler()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>

<P><STRONG><a name="[206]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[207]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[ea]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[208]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>

<P><STRONG><a name="[f7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d7]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>posix_memalign</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, h1_memalign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>

<P><STRONG><a name="[fc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[fd]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f0]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f1]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[fb]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[f2]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b3]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[ee]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[6d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[c5]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[101]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c1]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[c9]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[102]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c3]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[cb]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[b5]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[115]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[20a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[127]"></a>unw_getcontext</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[17f]"></a>libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[17d]"></a>libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[17e]"></a>libunwind::Registers_arm::saveVFPv3(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[e8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[20d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[20f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[109]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[10c]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[10d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[cd]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[cf]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[10e]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d1]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[d3]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[10f]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[ff]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[103]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[f8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>

<P><STRONG><a name="[114]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[210]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>

<P><STRONG><a name="[116]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[211]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>libunwind::Registers_arm::restoreCoreAndJumpTo()</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[188]"></a>libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[187]"></a>libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[189]"></a>libunwind::Registers_arm::restoreVFPv3(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[212]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[110]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[d9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[11a]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>

<P><STRONG><a name="[10b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[105]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[112]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[111]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[113]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[11d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[11e]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>LL_DMA_DeInit</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, stm32f4xx_ll_dma.o(.text.LL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[176]"></a>LL_DMA_Init</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, stm32f4xx_ll_dma.o(.text.LL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[11f]"></a>LL_DMA_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_ll_dma.o(.text.LL_DMA_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_StructInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[151]"></a>LL_GPIO_Init</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLeds
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCofiguration::PinCofiguration(GPIO_TypeDef*, unsigned, unsigned char, unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1ba]"></a>LL_Init1msTick</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_ll_utils.o(.text.LL_Init1msTick))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>LL_TIM_DeInit</STRONG> (Thumb, 590 bytes, Stack size 0 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[16b]"></a>LL_TIM_Init</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 482 bytes, Stack size 20 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
</UL>

<P><STRONG><a name="[16a]"></a>LL_TIM_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemCoreClockUpdate), UNUSED)

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; InputHandler::pollDevices()
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler::pollDevices()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[216]"></a>_Unwind_Complete</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Complete), UNUSED)

<P><STRONG><a name="[1b0]"></a>_Unwind_DeleteException</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_DeleteException))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[123]"></a>_Unwind_GetLanguageSpecificData</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetLanguageSpecificData))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[125]"></a>_Unwind_GetRegionStart</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetRegionStart))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[126]"></a>_Unwind_RaiseException</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_RaiseException))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_RaiseException &rArr; unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[12a]"></a>_Unwind_Resume</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_Resume &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[12b]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Get &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_fpreg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[12f]"></a>_Unwind_VRS_Interpret</STRONG> (Thumb, 556 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[130]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Pop &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>

<P><STRONG><a name="[132]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_fpreg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
</UL>

<P><STRONG><a name="[134]"></a>initConfigLcd()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(.text._Z13initConfigLcdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initConfigLcd()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetupWaitMode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetupRwLine
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetupDataPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetupControlPin
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetupBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::~type_info__sub_object()
</UL>

<P><STRONG><a name="[217]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[218]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[85]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[219]"></a>__cxxabiv1::__array_type_info::~__array_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[21a]"></a>__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[21b]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[21c]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[21d]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[21e]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[21f]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[220]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[221]"></a>__cxxabiv1::__function_type_info::~__function_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[222]"></a>__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[223]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[224]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[225]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[226]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[227]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[228]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[229]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[22a]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[86]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::~__class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[13d]"></a>__cxxabiv1::__free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv120__free_with_fallbackEPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
</UL>

<P><STRONG><a name="[8d]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[13f]"></a>__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv122__calloc_with_fallbackEjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[91]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[141]"></a>__cxxabiv1::__aligned_free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv128__aligned_free_with_fallbackEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_free_with_fallback(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
</UL>

<P><STRONG><a name="[142]"></a>__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv130__aligned_malloc_with_fallbackEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_malloc_with_fallback(unsigned) &rArr; posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
</UL>

<P><STRONG><a name="[82]"></a>MenuElement::isNeedToHandleEvent(const MenuEvents&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN11MenuElement19isNeedToHandleEventERK10MenuEvents))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV4Menu)
</UL>
<P><STRONG><a name="[121]"></a>InputHandler::pollDevices()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inputhandler_1.o(.text._ZN12InputHandler11pollDevicesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InputHandler::pollDevices()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[1c2]"></a>InputHandler::hasPendingEvent()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN12InputHandler15hasPendingEventEv))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>InputHandler::addDevice(InputDevice*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN12InputHandler9addDeviceEP11InputDevice))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>InputHandler::readEvent()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN12InputHandler9readEventEv))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>InputHandler::InputHandler()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, inputhandler_1.o(.text._ZN12InputHandlerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InputHandler::InputHandler() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.c
</UL>

<P><STRONG><a name="[22b]"></a>InputHandler::InputHandler__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, inputhandler_1.o(.text._ZN12InputHandlerC2Ev), UNUSED)

<P><STRONG><a name="[77]"></a>NextMenuHandler::handleExternalEvent(MenuElement*, ExternalEvent)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN15NextMenuHandler19handleExternalEventEP11MenuElement13ExternalEvent))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV15NextMenuHandler)
</UL>
<P><STRONG><a name="[14f]"></a>PinCofiguration::PinCofiguration(GPIO_TypeDef*, unsigned, unsigned char, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, inputhandler_1.o(.text._ZN15PinCofigurationC2EP12GPIO_TypeDefjhjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PinCofiguration::PinCofiguration(GPIO_TypeDef*, unsigned, unsigned char, unsigned, unsigned, unsigned, unsigned) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableGPIOClock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22c]"></a>PinCofiguration::PinCofiguration__sub_object(GPIO_TypeDef*, unsigned, unsigned char, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, inputhandler_1.o(.text._ZN15PinCofigurationC2EP12GPIO_TypeDefjhjjjj), UNUSED)

<P><STRONG><a name="[78]"></a>PrevMenuHandler::handleExternalEvent(MenuElement*, ExternalEvent)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text._ZN15PrevMenuHandler19handleExternalEventEP11MenuElement13ExternalEvent))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV15PrevMenuHandler)
</UL>
<P><STRONG><a name="[7a]"></a>MenuElementVariable::handleEvent(const MenuEvents&)</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, main.o(.text._ZN19MenuElementVariable11handleEventERK10MenuEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = MenuElementVariable::handleEvent(const MenuEvents&) &rArr; MenuElementVariable::decrement() &rArr; MenuElementVariable::displayValue() &rArr; lcdPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGoTo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdEnableCursor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisableCursor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV19MenuElementVariable)
</UL>
<P><STRONG><a name="[157]"></a>MenuElementVariable::displayValue()</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, main.o(.text._ZN19MenuElementVariable12displayValueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MenuElementVariable::displayValue() &rArr; lcdPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPuts
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPutc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPrintf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGoTo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::display()
</UL>

<P><STRONG><a name="[7b]"></a>MenuElementVariable::isNeedToHandleEvent(const MenuEvents&)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(.text._ZN19MenuElementVariable19isNeedToHandleEventERK10MenuEvents))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV19MenuElementVariable)
</UL>
<P><STRONG><a name="[79]"></a>MenuElementVariable::display()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text._ZN19MenuElementVariable7displayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MenuElementVariable::display() &rArr; MenuElementVariable::displayValue() &rArr; lcdPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPuts
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGoTo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV19MenuElementVariable)
</UL>
<P><STRONG><a name="[155]"></a>MenuElementVariable::decrement()</STRONG> (Thumb, 616 bytes, Stack size 64 bytes, main.o(.text._ZN19MenuElementVariable9decrementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MenuElementVariable::decrement() &rArr; MenuElementVariable::displayValue() &rArr; lcdPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::handleEvent(const MenuEvents&)
</UL>

<P><STRONG><a name="[156]"></a>MenuElementVariable::increment()</STRONG> (Thumb, 600 bytes, Stack size 48 bytes, main.o(.text._ZN19MenuElementVariable9incrementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MenuElementVariable::increment() &rArr; MenuElementVariable::displayValue() &rArr; lcdPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::handleEvent(const MenuEvents&)
</UL>

<P><STRONG><a name="[162]"></a>MenuElementVariable::MenuElementVariable(const FixedPoint&, const FixedPoint&, const FixedPoint&, const char*, const char*, const char*, bool, ExternalEventHandler*)</STRONG> (Thumb, 664 bytes, Stack size 32 bytes, main.o(.text._ZN19MenuElementVariableC2ERK10FixedPointS2_S2_PKcS4_S4_bP20ExternalEventHandler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1c1]"></a>MenuElementVariable::MenuElementVariable__sub_object(const FixedPoint&, const FixedPoint&, const FixedPoint&, const char*, const char*, const char*, bool, ExternalEventHandler*)</STRONG> (Thumb, 664 bytes, Stack size 32 bytes, main.o(.text._ZN19MenuElementVariableC2ERK10FixedPointS2_S2_PKcS4_S4_bP20ExternalEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MenuElementVariable::MenuElementVariable__sub_object(const FixedPoint&, const FixedPoint&, const FixedPoint&, const char*, const char*, const char*, bool, ExternalEventHandler*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>MenuElementOptionList::handleEvent(const MenuEvents&)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, main.o(.text._ZN21MenuElementOptionList11handleEventERK10MenuEvents))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV21MenuElementOptionList)
</UL>
<P><STRONG><a name="[7e]"></a>MenuElementOptionList::isNeedToHandleEvent(const MenuEvents&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text._ZN21MenuElementOptionList19isNeedToHandleEventERK10MenuEvents))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV21MenuElementOptionList)
</UL>
<P><STRONG><a name="[7c]"></a>MenuElementOptionList::display()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(.text._ZN21MenuElementOptionList7displayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MenuElementOptionList::display() &rArr; lcdClr &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPuts
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPutc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGoTo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV21MenuElementOptionList)
</UL>
<P><STRONG><a name="[164]"></a>MenuElementOptionList::MenuElementOptionList(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text._ZN21MenuElementOptionListC2EPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringcopy
</UL>

<P><STRONG><a name="[22d]"></a>MenuElementOptionList::MenuElementOptionList__sub_object(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text._ZN21MenuElementOptionListC2EPKc), UNUSED)

<P><STRONG><a name="[7f]"></a>MainVoltageChangeHandler::handleExternalEvent(MenuElement*, ExternalEvent)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text._ZN24MainVoltageChangeHandler19handleExternalEventEP11MenuElement13ExternalEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MainVoltageChangeHandler::handleExternalEvent(MenuElement*, ExternalEvent) &rArr; DitherPwm::setVoltage(FixedPoint) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setVoltage(FixedPoint)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV24MainVoltageChangeHandler)
</UL>
<P><STRONG><a name="[81]"></a>Menu::handleEvent(const MenuEvents&)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(.text._ZN4Menu11handleEventERK10MenuEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Menu::handleEvent(const MenuEvents&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV4Menu)
</UL>
<P><STRONG><a name="[80]"></a>Menu::display()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text._ZN4Menu7displayEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTV4Menu)
</UL>
<P><STRONG><a name="[83]"></a>Button::handle()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN6Button6handleEv))
<BR>[Address Reference Count : 1]<UL><LI> inputhandler_1.o(.rodata._ZTV6Button)
</UL>
<P><STRONG><a name="[1bd]"></a>Button::Button(PinCofiguration&, unsigned, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, inputhandler_1.o(.text._ZN6ButtonC2ER15PinCofigurationjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Button::Button(PinCofiguration&, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>Button::Button__sub_object(PinCofiguration&, unsigned, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, inputhandler_1.o(.text._ZN6ButtonC2ER15PinCofigurationjj), UNUSED)

<P><STRONG><a name="[84]"></a>Encoder::handle()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN7Encoder6handleEv))
<BR>[Address Reference Count : 1]<UL><LI> inputhandler_1.o(.rodata._ZTV7Encoder)
</UL>
<P><STRONG><a name="[1bc]"></a>Encoder::Encoder(PinCofiguration&, PinCofiguration&)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN7EncoderC2ER15PinCofigurationS1_))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22f]"></a>Encoder::Encoder__sub_object(PinCofiguration&, PinCofiguration&)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, inputhandler_1.o(.text._ZN7EncoderC2ER15PinCofigurationS1_), UNUSED)

<P><STRONG><a name="[167]"></a>DitherPwm::setVoltage(FixedPoint)</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, ditherpwm.o(.text._ZN9DitherPwm10setVoltageE10FixedPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DitherPwm::setVoltage(FixedPoint) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVoltageChangeHandler::handleExternalEvent(MenuElement*, ExternalEvent)
</UL>

<P><STRONG><a name="[168]"></a>DitherPwm::setupTimer()</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, ditherpwm.o(.text._ZN9DitherPwm10setupTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DitherPwm::setupTimer() &rArr; LL_TIM_OC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_StructInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, ditherpwm.o(.text._ZN9DitherPwm12setupByStepsE10FixedPointS0_S0_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char) &rArr; DitherPwm::setupDMA() &rArr; LL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setVoltage(FixedPoint)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ditherpwm.o(.text._ZN9DitherPwm17setupByBasicStepNE10FixedPointS0_tth), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setVoltage(FixedPoint)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[170]"></a>DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, ditherpwm.o(.text._ZN9DitherPwm19setupByPreciseStepNE10FixedPointS0_tth), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupTimer()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setVoltage(FixedPoint)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1c0]"></a>DitherPwm::start()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ditherpwm.o(.text._ZN9DitherPwm5startEv))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>DitherPwm::setupDMA()</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, ditherpwm.o(.text._ZN9DitherPwm8setupDMAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DitherPwm::setupDMA() &rArr; LL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerDmaStream
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerDmaChannel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerDma
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableDMAClock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByPreciseStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupByBasicStepN(FixedPoint, FixedPoint, unsigned short, unsigned short, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[177]"></a>DitherPwm::DitherPwm(TIM_TypeDef*)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ditherpwm.o(.text._ZN9DitherPwmC2EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DitherPwm::DitherPwm(TIM_TypeDef*) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerCh1Pin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerCh1Af
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTIMGPIOClock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTIMClock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>DitherPwm::DitherPwm__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ditherpwm.o(.text._ZN9DitherPwmC2EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[17c]"></a>DitherPwm::~DitherPwm()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ditherpwm.o(.text._ZN9DitherPwmD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DitherPwm::~DitherPwm() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[231]"></a>DitherPwm::~DitherPwm__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ditherpwm.o(.text._ZN9DitherPwmD2Ev), UNUSED)

<P><STRONG><a name="[a2]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[99]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(unsigned long long*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9a]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(unsigned long long*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9e]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[180]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13stepWithEHABIEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI() &rArr; _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_eht_entry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()
</UL>

<P><STRONG><a name="[98]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9f]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[a1]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::getRegisterName(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[183]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::__1::__upper_bound&lang;std::__1::__less&lang;unsigned, unsigned&rang;&, libunwind::EHABISectionIterator&lang;libunwind::LocalAddressSpace&rang;, unsigned&rang;(T2, T2, const T3&, T1)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
</UL>

<P><STRONG><a name="[a0]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9b]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step() &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI() &rArr; _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[96]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9d]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreCoreAndJumpTo()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[97]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9c]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[95]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[94]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[182]"></a>libunwind::Registers_arm::getRegisterName(int)</STRONG> (Thumb, 916 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm15getRegisterNameEi))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)
</UL>

<P><STRONG><a name="[185]"></a>libunwind::Registers_arm::restoreSavedFloatRegisters()</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm26restoreSavedFloatRegistersEv))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPv3(unsigned long long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[93]"></a>libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[87]"></a>__cxxabiv1::__shim_type_info::noop1() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[88]"></a>__cxxabiv1::__shim_type_info::noop2() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[8a]"></a>__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[8b]"></a>__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[8c]"></a>__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[18b]"></a>__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[89]"></a>__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const &rArr; __dynamic_cast &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[18c]"></a>__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[18d]"></a>__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[18f]"></a>__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 406 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[8e]"></a>__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[8f]"></a>__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 214 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[90]"></a>__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[190]"></a>__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>

<P><STRONG><a name="[92]"></a>__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[18e]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>

<P><STRONG><a name="[191]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[a4]"></a>std::bad_exception::what() const</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[a6]"></a>std::bad_array_length::what() const</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt16bad_array_length4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
</UL>
<P><STRONG><a name="[a8]"></a>std::bad_array_new_length::what() const</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[aa]"></a>std::bad_alloc::what() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[a3]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_exception::~bad_exception__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[232]"></a>std::bad_array_length::bad_array_length()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthC2Ev), UNUSED)

<P><STRONG><a name="[233]"></a>std::bad_array_length::bad_array_length__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthC2Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>std::bad_array_length::~bad_array_length__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_array_length::~bad_array_length__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
</UL>
<P><STRONG><a name="[234]"></a>std::bad_array_new_length::bad_array_new_length()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[235]"></a>std::bad_array_new_length::bad_array_new_length__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[a7]"></a>std::bad_array_new_length::~bad_array_new_length__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_array_new_length::~bad_array_new_length__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[184]"></a>T2 std::__1::__upper_bound&lang;std::__1::__less&lang;unsigned, unsigned&rang;&, libunwind::EHABISectionIterator&lang;libunwind::LocalAddressSpace&rang;, unsigned&rang;(T2, T2, const T3&, T1)</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZNSt3__113__upper_boundIRNS_6__lessIjjEEN9libunwind20EHABISectionIteratorINS4_17LocalAddressSpaceEEEjEET0_S8_S8_RKT1_T_))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
</UL>

<P><STRONG><a name="[1a5]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[236]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_alloc::~bad_alloc__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[1]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> cxa_personality.cpp.o(.text.__cxa_call_unexpected)
</UL>
<P><STRONG><a name="[237]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[238]"></a>std::bad_array_length::~bad_array_length()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[239]"></a>std::bad_array_length::~bad_array_length__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[23a]"></a>std::bad_array_new_length::~bad_array_new_length()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[23b]"></a>std::bad_array_new_length::~bad_array_new_length__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[73]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> new.cpp.o(.text._Znwj)
<LI> new.cpp.o(.text._ZnwjSt11align_val_t)
</UL>
<P><STRONG><a name="[23c]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[23d]"></a>std::exception::~exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[7]"></a>std::exception::~exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 4]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[23e]"></a>std::type_info::~type_info()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)

<P><STRONG><a name="[2]"></a>std::type_info::~type_info__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__enum_type_info::~__enum_type_info()
</UL>

<P><STRONG><a name="[192]"></a>std::unexpected()</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt10unexpectedv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
</UL>

<P><STRONG><a name="[14a]"></a>std::__terminate(void(*)())</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = std::__terminate(void(*)()) &rArr; __clang_call_terminate &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>

<P><STRONG><a name="[193]"></a>std::__unexpected(void(*)())</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt12__unexpectedPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__unexpected(void(*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
</UL>

<P><STRONG><a name="[1ad]"></a>std::get_terminate()</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt13get_terminatev))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[23f]"></a>std::set_terminate(void(*)())</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE), UNUSED)

<P><STRONG><a name="[1ae]"></a>std::get_unexpected()</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt14get_unexpectedv))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[240]"></a>std::set_unexpected(void(*)())</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE), UNUSED)

<P><STRONG><a name="[1a3]"></a>std::get_new_handler()</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[241]"></a>std::set_new_handler(void(*)())</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt15set_new_handlerPFvvE), UNUSED)

<P><STRONG><a name="[f]"></a>std::terminate()</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; std::__terminate(void(*)()) &rArr; __clang_call_terminate &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
</UL>
<P><STRONG><a name="[198]"></a>operator delete[] (void*)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, unsigned)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[199]"></a>operator delete[] (void*, const std::nothrow_t&)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPvRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[19a]"></a>operator delete[] (void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPvj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[13c]"></a>operator delete (void*)</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::~DitherPwm()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const std::nothrow_t&)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_array_new_length::~bad_array_new_length__deallocating()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_array_length::~bad_array_length__deallocating()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
</UL>

<P><STRONG><a name="[19b]"></a>operator delete (void*, const std::nothrow_t&)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdlPvRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[19c]"></a>operator delete (void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdlPvj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[19d]"></a>operator new[] (unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._Znaj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[19f]"></a>operator new[] (unsigned, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[1a0]"></a>operator new[] (unsigned, std::align_val_t)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajSt11align_val_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1a2]"></a>operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajSt11align_val_tRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[19e]"></a>operator new(unsigned)</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, new.cpp.o(.text._Znwj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[1a7]"></a>operator new(unsigned, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnwjRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[1a1]"></a>operator new(unsigned, std::align_val_t)</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnwjSt11align_val_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[1a8]"></a>operator new(unsigned, std::align_val_t, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnwjSt11align_val_tRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[71]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[72]"></a>__aeabi_unwind_cpp_pr2</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[196]"></a>__clang_call_terminate</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, new.cpp.o(.text.__clang_call_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __clang_call_terminate &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1a9]"></a>__cxa_allocate_dependent_exception</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_dependent_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[1a4]"></a>__cxa_allocate_exception</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_allocate_exception &rArr;  __cxa_call_unexpected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[149]"></a>__cxa_begin_catch</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>

<P><STRONG><a name="[1ac]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_cleanup &rArr; __cxa_call_unexpected &rArr;  std::__terminate(void(*)()) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[1aa]"></a>__cxa_call_unexpected</STRONG> (Thumb, 424 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__cxa_call_unexpected))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_call_unexpected &rArr;  std::__terminate(void(*)()) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>

<P><STRONG><a name="[14c]"></a>__cxa_decrement_exception_refcount</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_decrement_exception_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_decrement_exception_refcount &rArr;  __cxa_call_unexpected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
</UL>

<P><STRONG><a name="[195]"></a>__cxa_end_catch</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; __cxxabiv1::__aligned_free_with_fallback(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1ab]"></a>__cxa_get_globals</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
</UL>

<P><STRONG><a name="[197]"></a>__cxa_get_globals_fast</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals_fast))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1af]"></a>__cxa_rethrow</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_rethrow &rArr;  std::__terminate(void(*)()) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[1b1]"></a>__cxa_rethrow_primary_exception</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[1a6]"></a>__cxa_throw</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[166]"></a>__dynamic_cast</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text.__dynamic_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __dynamic_cast &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVoltageChangeHandler::handleExternalEvent(MenuElement*, ExternalEvent)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1b2]"></a>__gnu_unwind_frame</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__gnu_unwind_frame))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[76]"></a>__gxx_personality_v0</STRONG> (Thumb, 370 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__gxx_personality_v0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __gxx_personality_v0 &rArr; __cxa_begin_cleanup &rArr; __cxa_call_unexpected &rArr;  std::__terminate(void(*)()) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>
<BR>[Address Reference Count : 12]<UL><LI> main.o(.ARM.extab.text.main)
<LI> new.cpp.o(.ARM.extab.text._ZnwjRKSt9nothrow_t)
<LI> new.cpp.o(.ARM.extab.text._ZnajRKSt9nothrow_t)
<LI> cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
<LI> new.cpp.o(.ARM.extab.text._ZnwjSt11align_val_tRKSt9nothrow_t)
<LI> new.cpp.o(.ARM.extab.text._ZnajSt11align_val_tRKSt9nothrow_t)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
</UL>
<P><STRONG><a name="[194]"></a>abort_message</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>

<P><STRONG><a name="[181]"></a>decode_eht_entry</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.decode_eht_entry))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[1b3]"></a>delayUs</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lcd.o(.text.delayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[174]"></a>enableDMAClock</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, functions.o(.text.enableDMAClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enableDMAClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[150]"></a>enableGPIOClock</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, functions.o(.text.enableGPIOClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enableGPIOClock
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCofiguration::PinCofiguration(GPIO_TypeDef*, unsigned, unsigned char, unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[17b]"></a>enableTIMClock</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, functions.o(.text.enableTIMClock))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[17a]"></a>enableTIMGPIOClock</STRONG> (Thumb, 206 bytes, Stack size 4 bytes, functions.o(.text.enableTIMGPIOClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enableTIMGPIOClock
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[179]"></a>getTimerCh1Af</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, functions.o(.text.getTimerCh1Af))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[178]"></a>getTimerCh1Pin</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, functions.o(.text.getTimerCh1Pin))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[171]"></a>getTimerDma</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, functions.o(.text.getTimerDma))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[173]"></a>getTimerDmaChannel</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, functions.o(.text.getTimerDmaChannel))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[172]"></a>getTimerDmaStream</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, functions.o(.text.getTimerDmaStream))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupDMA()
</UL>

<P><STRONG><a name="[1b6]"></a>initLeds</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, leds.o(.text.initLeds))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initLeds &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>lcdClr</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lcd.o(.text.lcdClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcdClr &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementOptionList::display()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::display()
</UL>

<P><STRONG><a name="[1b8]"></a>lcdCommand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text.lcdCommand), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
</UL>

<P><STRONG><a name="[154]"></a>lcdDisableCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text.lcdDisableCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcdDisableCursor &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::handleEvent(const MenuEvents&)
</UL>

<P><STRONG><a name="[153]"></a>lcdEnableCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text.lcdEnableCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcdEnableCursor &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::handleEvent(const MenuEvents&)
</UL>

<P><STRONG><a name="[152]"></a>lcdGoTo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(.text.lcdGoTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcdGoTo &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementOptionList::display()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::display()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::handleEvent(const MenuEvents&)
</UL>

<P><STRONG><a name="[1b9]"></a>lcdInit</STRONG> (Thumb, 920 bytes, Stack size 72 bytes, lcd.o(.text.lcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcdInit &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>lcdPrintf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lcd.o(.text.lcdPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lcdPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
</UL>

<P><STRONG><a name="[159]"></a>lcdPutc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text.lcdPutc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcdPutc &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementOptionList::display()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
</UL>

<P><STRONG><a name="[158]"></a>lcdPuts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd.o(.text.lcdPuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcdPuts &rArr; lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementOptionList::display()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::display()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::displayValue()
</UL>

<P><STRONG><a name="[137]"></a>lcdSetupBusWidth</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text.lcdSetupBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initConfigLcd()
</UL>

<P><STRONG><a name="[136]"></a>lcdSetupControlPin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(.text.lcdSetupControlPin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initConfigLcd()
</UL>

<P><STRONG><a name="[135]"></a>lcdSetupDataPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(.text.lcdSetupDataPin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initConfigLcd()
</UL>

<P><STRONG><a name="[138]"></a>lcdSetupRwLine</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text.lcdSetupRwLine))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initConfigLcd()
</UL>

<P><STRONG><a name="[139]"></a>lcdSetupWaitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text.lcdSetupWaitMode))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initConfigLcd()
</UL>

<P><STRONG><a name="[242]"></a>lcdStructure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(.text.lcdStructure), UNUSED)

<P><STRONG><a name="[1b7]"></a>lcdWrite</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, lcd.o(.text.lcdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcdWrite &rArr; delayUs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCommand
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPuts
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPutc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPrintf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGoTo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdEnableCursor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisableCursor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
</UL>

<P><STRONG><a name="[1bf]"></a>ledOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, leds.o(.text.ledOn))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>ledToggle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, leds.o(.text.ledToggle))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>main</STRONG> (Thumb, 3596 bytes, Stack size 1776 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1948 + Unknown Stack Size
<LI>Call Chain = main &rArr; DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char) &rArr; DitherPwm::setupDMA() &rArr; LL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringcopy
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledToggle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOn
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLeds
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTIMClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::~DitherPwm()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::DitherPwm(TIM_TypeDef*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::start()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setupBySteps(FixedPoint, FixedPoint, FixedPoint, unsigned short, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DitherPwm::setVoltage(FixedPoint)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(PinCofiguration&, PinCofiguration&)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(PinCofiguration&, unsigned, unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::MenuElementVariable__sub_object(const FixedPoint&, const FixedPoint&, const FixedPoint&, const char*, const char*, const char*, bool, ExternalEventHandler*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCofiguration::PinCofiguration(GPIO_TypeDef*, unsigned, unsigned char, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler::readEvent()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler::addDevice(InputDevice*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler::hasPendingEvent()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initConfigLcd()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[165]"></a>stringcopy</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, functions.o(.text.stringcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stringcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementOptionList::MenuElementOptionList(const char*)
</UL>

<P><STRONG><a name="[12e]"></a>unw_get_fpreg</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[124]"></a>unw_get_proc_info</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_proc_info))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[12c]"></a>unw_get_reg</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_reg))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[128]"></a>unw_init_local</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_init_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[13a]"></a>unw_resume</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_resume))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[12d]"></a>unw_save_vfp_as_X</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_save_vfp_as_X))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[133]"></a>unw_set_fpreg</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[131]"></a>unw_set_reg</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_reg))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[14e]"></a>unw_step</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_step))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>

<P><STRONG><a name="[106]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c7]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1c6]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1c8]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1c9]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[107]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[108]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ca]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[10a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[dc]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[6f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
</UL>

<P><STRONG><a name="[1cb]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d1]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>

<P><STRONG><a name="[1cf]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[1d0]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>

<P><STRONG><a name="[1d2]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>

<P><STRONG><a name="[244]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[245]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[1d3]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1d4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[247]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>

<P><STRONG><a name="[1d5]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ce]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1cd]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::increment()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuElementVariable::decrement()
</UL>

<P><STRONG><a name="[1d6]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1d8]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1d9]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1da]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1db]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1dc]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>

<P><STRONG><a name="[1dd]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[d5]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[24c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[24d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[b7]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[bb]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ab]"></a>_GLOBAL__sub_I_main.c</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text._GLOBAL__sub_I_main.c))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_main.c &rArr; InputHandler::InputHandler() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler::InputHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[d]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, functions.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> functions.o(.data.AllTimersRccAxBxTable)
</UL>
<P><STRONG><a name="[c]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, functions.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> functions.o(.data.AllTimersRccAxBxTable)
</UL>
<P><STRONG><a name="[1d7]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1cc]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[143]"></a>_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</STRONG> (Thumb, 926 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context &rArr; _Unwind_VRS_Get &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[14b]"></a>_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[146]"></a>_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[145]"></a>_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L18readEncodedPointerEPPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L18readEncodedPointerEPPKhh &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[147]"></a>_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[129]"></a>_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_resume
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[14d]"></a>&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZN12_GLOBAL__N_114unwindOneFrameEjP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr1
</UL>

<P><STRONG><a name="[6e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[75]"></a>_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr; __clang_call_terminate &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_throw)
</UL>
<P><STRONG><a name="[74]"></a>_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr; __clang_call_terminate &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
</UL>
<P><STRONG><a name="[ad]"></a>__cxa_end_cleanup_impl</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_cleanup_impl), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __cxa_end_cleanup_impl &rArr; std::terminate() &rArr; std::__terminate(void(*)()) &rArr; __clang_call_terminate &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[104]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[13e]"></a>&lang;unnamed namespace 1&rang;::fallback_free(void*)</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_113fallback_freeEPv))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
</UL>

<P><STRONG><a name="[140]"></a>&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_115fallback_mallocEj))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
